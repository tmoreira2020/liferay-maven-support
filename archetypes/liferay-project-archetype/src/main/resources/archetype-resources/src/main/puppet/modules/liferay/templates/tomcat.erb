#!/bin/bash
#
# tomcat   This shell script takes care of starting and stopping Tomcat
#
# chkconfig: - 80 20
#
### BEGIN INIT INFO
# Provides: tomcat7
# Required-Start: $network $syslog
# Required-Stop: $network $syslog
# Default-Start:
# Default-Stop:
# Short-Description: start and stop tomcat
### END INIT INFO

## Source function library.
#. /etc/rc.d/init.d/functions
TOMCAT_HOME=<%= scope.lookupvar("params::tomcat_path") %>
SHUTDOWN_WAIT=20

tomcat_pid() {
	echo `ps aux | grep org.apache.catalina.startup.Bootstrap | grep -v grep | awk '{ print $2 }'`
}

start() {
	pid=$(tomcat_pid)
	if [ -n "$pid" ]
	then
		echo "Tomcat is already running (pid: $pid)"
	else
		# Start tomcat
		echo "Starting tomcat"
		ulimit -n 100000
		umask 007
		/bin/su -p -s /bin/sh <%= scope.lookupvar("params::runtime_username") %> $TOMCAT_HOME/bin/startup.sh
	fi


	return 0
}

stop() {
	pid=$(tomcat_pid)
	if [ -n "$pid" ]
	then
		echo "Stoping Tomcat"
		/bin/su -p -s /bin/sh <%= scope.lookupvar("params::runtime_username") %> $TOMCAT_HOME/bin/shutdown.sh

		let kwait=$SHUTDOWN_WAIT
		count=0;
		until [ `ps -p $pid | grep -c $pid` = '0' ] || [ $count -gt $kwait ]
		do
			echo -n -e "\nwaiting for processes to exit";
			sleep 1
			let count=$count+1;
		done

		if [ $count -gt $kwait ]; then
			echo -n -e "\nkilling processes which didn't stop after $SHUTDOWN_WAIT seconds"
			kill -9 $pid
		fi
	else
		echo "Tomcat is not running"
	fi

	return 0
}

debug() {
	pid=$(tomcat_pid)
	if [ -n "$pid" ]
	then
		echo "Tomcat is already running (pid: $pid)"
	else
		# Debug tomcat
		echo "Debugging tomcat"
		ulimit -n 100000
		umask 007
		/bin/su -p -s /bin/sh <%= scope.lookupvar("params::runtime_username") %> -c "$TOMCAT_HOME/bin/catalina.sh jpda start"
	fi


	return 0
}

case $1 in
start)
	start
;;
stop)
	stop
;;
restart)
	stop
	start
;;
debug)
	debug
;;
status)
	pid=$(tomcat_pid)
	if [ -n "$pid" ]
	then
		echo "Tomcat is running with pid: $pid"
	else
		echo "Tomcat is not running"
		exit 3
	fi
;;
esac
exit 0